var documenterSearchIndex = {"docs":
[{"location":"#LLCB","page":"Home","title":"LLCB","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repo contains the implementation of the 'LLCB' method, which is described in Weinstock & Arce et al. For now, the Julia module implementing LLCB is called  InferCausalGraph. ","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick-start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Assuming that you have expression data properly formatted into a dataframe called expression:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InferCausalGraph\nconst graph = interventionGraph(expression)\nconst model_pars = get_model_params(false, 1.0, 0.01)\nconst sampling_pars = get_sampling_params(false)\nmodel = fit_cyclic_model(graph, false, model_pars, sampling_pars)\nedges = get_cyclic_matrices(graph, false)[3]\nparsed_chain = parse_cyclic_chain(model[1], model[2], edges)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Currently using Julia 1.9.4. Please see mannifest.toml for more details on  which Julia modules are required. Later versions of Julia are likely to work but have not been tested. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install, you can clone this repo, activate the project, modify LOAD_PATH (as needed) and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.instantiate() # only need to this run once to setup the package\nusing InferCausalGraph # on my machine, takes 13.68 seconds in Julia 1.9.4","category":"page"},{"location":"#Input-data-formatting","page":"Home","title":"Input data formatting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The input variable expression should be a dataframe where the rows indicate the sample. Coluns should include the identity of the  sample donor, the intervention performed intervention, and then additional column for each readout gene, where the column names are the gene symbols.  Overall, the dataframe should have one row per sample, and P + 2 columns, where P is the number of readout genes. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For an example of what this data might look like, run the following example  from the test script test/extended_test.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"test/extended_test.jl\")\nsim_cyclic_expression(cyclic_chain_graph(), 3, 50, true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will simulate expression data for a 5 gene graph.  Each KO has been performed in 3 'donors' with 50 replicates (yes, a somewhat optimistic setting). Control data (no KO's) are also included. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first ten rows of the data looks like:","category":"page"},{"location":"","page":"Home","title":"Home","text":" Row │ gene_1   gene_2   gene_3   gene_4   gene_5   intervention  donor\n     │ Float64  Float64  Float64  Float64  Float64  String        String\n─────┼───────────────────────────────────────────────────────────────────\n   1 │ 0.0      3.36514  4.67425  4.92861  5.44028  gene_1        1\n   2 │ 0.0      2.63952  3.93181  4.63513  4.89527  gene_1        1\n   3 │ 0.0      2.9394   4.14463  4.9676   5.48139  gene_1        1\n   4 │ 0.0      3.23764  4.36584  4.67192  5.13055  gene_1        1\n   5 │ 0.0      2.86171  4.43841  4.50357  4.76188  gene_1        1\n   6 │ 0.0      2.66913  3.957    4.81993  5.05754  gene_1        1\n   7 │ 0.0      2.58999  3.68238  4.23696  5.25393  gene_1        1\n   8 │ 0.0      2.2197   3.82162  4.67875  4.75546  gene_1        1\n   9 │ 0.0      2.89671  4.33153  4.52459  4.74094  gene_1        1\n  10 │ 0.0      2.72936  4.18565  4.70949  4.98802  gene_1        1","category":"page"},{"location":"#Input-data-notes","page":"Home","title":"Input data notes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In our manuscript, we used bulk RNA-seq data as the read-out. Our processing pipeline is available here. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please note that we analyzed the DESeq2 variance stabilizing transform (vst) function to  normalize the data. We also recommend estimating expression PCs and regressing out those which correspond to unwanted global sources of variation. ","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"interventionGraph\nparse_cyclic_chain\nfit_cyclic_model","category":"page"},{"location":"#InferCausalGraph.interventionGraph","page":"Home","title":"InferCausalGraph.interventionGraph","text":"\nusing DataFrames\n\n\n\n\n\n\n","category":"type"},{"location":"#InferCausalGraph.parse_cyclic_chain","page":"Home","title":"InferCausalGraph.parse_cyclic_chain","text":"parse_cyclic_chain(chains, posterior_adjacency, edges)\n\n    model = fit_cyclic_model(graph, false, model_pars, sampling_pars)\n    parsed = parse_cyclic_chain(\n        model[1], model[2], cyclic_matrices[3]\n    )\n\n\n\n\n\n","category":"function"},{"location":"#InferCausalGraph.fit_cyclic_model","page":"Home","title":"InferCausalGraph.fit_cyclic_model","text":"fit_cyclic_model(g, false, model_pars, sampling_pars)\n\nThis fits the LLCB model itself. The  first argument must be an object of class interventionGraph . \n\n    model = fit_cyclic_model(graph, false, model_pars, sampling_pars)\n\nReturns:\n\nThe MCMCChains object from pathfinder\nThe posterior adjacency matrix samples\nThe Turing model\nThe entire pathfinder object\n\n\n\n\n\n","category":"function"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please contact Josh Weinstock <jweins17@jhu.edu> with questions. ","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use this method, please cite following manuscript:","category":"page"},{"location":"","page":"Home","title":"Home","text":"https://www.biorxiv.org/content/10.1101/2023.09.17.557749v2","category":"page"}]
}
